using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TypealizR.Core;
using TypealizR.Extensions;

namespace TypealizR;

internal class CodeFirstClassModel(string fileName, TypeModel implementingInterface, TypeModel type, string[] containingTypes, IEnumerable<CodeFirstMethodModel> methods, IEnumerable<CodeFirstPropertyModel> properties)
{
    private readonly TypeModel implementingInterface = implementingInterface;
    private readonly TypeModel type = type;
    private readonly string[] containingTypes = containingTypes;
    private readonly IEnumerable<CodeFirstMethodModel> methods = methods;
    private readonly IEnumerable<CodeFirstPropertyModel> properties = properties;
    private readonly HashSet<string> usings =
    [
        "System",
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis",
        "Microsoft.Extensions.Localization"
    ];

    public string FileName { get; } = fileName;

    internal string ToCSharp(Type generatorType)
    {
        var builder = new StringBuilder();

        builder.AppendLine($$"""
            // <auto-generated/>
            {{usings.Select(x => $"using {x};").ToMultiline(appendNewLineAfterEach: false)}}
            namespace {{type.Namespace}} {
        """);

        builder.Append($$"""
            }
        """);

        return builder.ToString();

    //     return $$"""
    //     {{generatorType.GeneratedCodeAttribute()}}
    //     public partial class {{type.Name}}: {{implementingInterface.Name}} {
                
    //         private readonly IStringLocalizer<{{implementingInterface.Name}}> localizer;
    //         public {{type.Name}} (IStringLocalizer<{{implementingInterface.Name}}> localizer) {
    //             this.localizer = localizer;
    //         }
    //         {{methods.Select(x => x.ToCSharp()).ToMultiline("        ", appendNewLineAfterEach: false)}}
    //         {{properties.Select(x => x.ToCSharp()).ToMultiline("        ", appendNewLineAfterEach: false)}}
    //     }
    // }
    // """;
    }
}
