using System;
using System.Collections.Generic;
using System.Linq;
using TypealizR.Core;
using TypealizR.Extensions;

namespace TypealizR;

internal class CodeFirstClassModel
{
    private readonly TypeModel implementingInterface;
    private readonly TypeModel type;
    private readonly IEnumerable<CodeFirstMethodModel> methods;
    private readonly IEnumerable<CodeFirstPropertyModel> properties;
    private readonly HashSet<string> usings =
    [
        "System",
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis",
        "Microsoft.Extensions.Localization"
    ];

    public CodeFirstClassModel(string fileName, TypeModel implementingInterface, TypeModel type, IEnumerable<CodeFirstMethodModel> methods, IEnumerable<CodeFirstPropertyModel> properties)
    {
        FileName = fileName;
        this.implementingInterface = implementingInterface;
        this.type = type;
        this.methods = methods;
        this.properties = properties;
    }

    public string FileName { get; }

    internal string ToCSharp(Type generatorType) => $$"""

    // <auto-generated/>
    {{usings.Select(x => $"using {x};").ToMultiline(appendNewLineAfterEach: false)}}
    namespace {{type.Namespace}} {
    
        {{generatorType.GeneratedCodeAttribute()}}
        public partial class {{type.Name}}: {{implementingInterface.Name}} {
                
            private readonly IStringLocalizer<{{implementingInterface.Name}}> localizer;
            public {{type.Name}} (IStringLocalizer<{{implementingInterface.Name}}> localizer) {
                this.localizer = localizer;
            }
            {{methods.Select(x => x.ToCSharp()).ToMultiline("        ", appendNewLineAfterEach: false)}}
            {{properties.Select(x => x.ToCSharp()).ToMultiline("        ", appendNewLineAfterEach: false)}}
        }
    }
    """;
}
