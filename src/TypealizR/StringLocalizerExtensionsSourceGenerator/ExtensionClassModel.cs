using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Microsoft.CodeAnalysis;
using TypealizR.Core;
using TypealizR.Extensions;

namespace TypealizR;
internal class ExtensionClassModel
{
    public IEnumerable<string> Usings => usings;

    private readonly TypeModel markertType;
    private readonly IEnumerable<ExtensionMethodModel> methods;

    public ExtensionClassModel(TypeModel markertType, string rootNamespace, IEnumerable<ExtensionMethodModel> methods)
    {
        this.markertType = markertType;
        this.methods = methods;
        usings.Add(rootNamespace);
        usings.Add(markertType.Namespace);
        usings.Add($"{markertType.Namespace}.TypealizR");
    }

    private readonly HashSet<string> usings = new()
    {
        "System",
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis"
    };

    public string FileName => $"IStringLocalizerExtensions.{markertType.FullName}.g.cs";

    [SuppressMessage("Globalization", "CA1308:Normalize strings to uppercase", Justification = "uppercase would not be valid C#")]
    public string ToCSharp(Type generatorType) => $$"""
        // <auto-generated/>
        {{Usings.Select(x => $"using {x};").ToMultiline(appendNewLineAfterEach: false)}}
        namespace Microsoft.Extensions.Localization
        {

            {{generatorType.GeneratedCodeAttribute()}}
            /// <summary>
            /// Extensions for <see cref="{{markertType.FullName}}"/> to utilize typed-access to ressources generated by TypealizR.
            /// </summary>
            {{markertType.Accessibility.ToVisibilty().ToString().ToLowerInvariant()}} static partial class IStringLocalizerExtensions{{markertType.FullNameForClassName}}
            {

                {{methods.Select(x => x.ToCSharp()).ToMultiline()}}

                /// <summary>
                /// wraps the specified <see cref="IStringLocalizer{{markertType.Name}}"/> into a generated type providing properties to access [Some.Nested.Group]: via properties
                /// IStringLocalizer<{{markertType.Name}}> localize = ...
                /// localize.Some.Nested.Group...
                /// </summary>
                [DebuggerStepThrough]
                public static Typealized{{markertType.Name}} Typealize(this IStringLocalizer<{{markertType.GlobalFullName}}> that)
                    => new Typealized{{markertType.Name}}(that);
            }
        }
        """;
}
