//HintName: IStringLocalizerExtensions.Some.Root.Namespace.Simple_with_Blanks.g.cs
// <auto-generated/>
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Some.Root.Namespace;
using Some.Root.Namespace.TypealizR;
namespace Microsoft.Extensions.Localization
{
    /// <summary>
    /// Extensions for <see cref="Some.Root.Namespace.Simple_with_Blanks"/> to utilize typed-access to ressources generated by TypealizR.
    /// </summary>
    [GeneratedCode("TypealizR.StringLocalizerExtensionsSourceGenerator", "1.0.0.0")]
    internal static partial class IStringLocalizerExtensionsSomeRootNamespaceSimple_with_Blanks
    {
        /// <summary>
        /// Looks up a localized string similar to 'Hello'
        /// </summary>
        /// <returns>
        /// A localized version of the current default value of 'World'
        /// </returns>
        [DebuggerStepThrough]
        public static LocalizedString Hello(this IStringLocalizer<global::Some.Root.Namespace.Simple_with_Blanks> that) => that[_Hello];
        private const string _Hello = "Hello";
        /// <summary>
        /// wraps the specified <see cref="IStringLocalizer{Simple_with_Blanks}"/> into a generated type providing properties to access [Some.Nested.Group]: via properties
        /// IStringLocalizer{Simple_with_Blanks} localize = ...
        /// localize.Some.Nested.Group...
        /// </summary>
        [DebuggerStepThrough]
        public static TypealizedSimple_with_Blanks Typealize(this IStringLocalizer<global::Some.Root.Namespace.Simple_with_Blanks> that)
            => new TypealizedSimple_with_Blanks(that);
    }
}