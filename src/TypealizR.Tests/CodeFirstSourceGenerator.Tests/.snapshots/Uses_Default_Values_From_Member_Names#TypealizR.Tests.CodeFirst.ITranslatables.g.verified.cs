//HintName: TypealizR.Tests.CodeFirst.ITranslatables.g.cs
// <auto-generated/>
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Microsoft.Extensions.Localization;
namespace TypealizR.Tests.CodeFirst {
    [GeneratedCode("TypealizR.CodeFirstSourceGenerator", "1.0.0.0")]
    internal partial class Translatables: ITranslatables {
        private readonly IStringLocalizer<ITranslatables> localizer;
        public Translatables (IStringLocalizer<ITranslatables> localizer) {
          this.localizer = localizer;
        }
        #region methods
        #region typealized Hello
        /// <summary>
        /// "Hello {0}"
        /// <summary>
        public LocalizedString Hello_Raw
        {
            get
            {
              var localizedString = localizer["Hello"];
              if (!localizedString.ResourceNotFound)
              {
                  return localizedString;
              }
              return localizer[$"""Hello {0}"""];
            }
        }
        /// <summary>
        /// "Hello {0}"
        /// <summary>
        public LocalizedString Hello (string world)
        {
            var localizedString = localizer[@"Hello", world];
            if (!localizedString.ResourceNotFound)
            {
                return localizedString;
            }
          return localizer[$"""Hello {0}""", world];
        }
        #endregion
        #region typealized Hello
        /// <summary>
        /// "Hello {0} {1} {2} {3}"
        /// <summary>
        public LocalizedString Hello_Raw
        {
            get
            {
              var localizedString = localizer["Hello"];
              if (!localizedString.ResourceNotFound)
              {
                  return localizedString;
              }
              return localizer[$"""Hello {0} {1} {2} {3}"""];
            }
        }
        /// <summary>
        /// "Hello {0} {1} {2} {3}"
        /// <summary>
        public LocalizedString Hello (string user, string world, int visitCount, bool dontPanic)
        {
            var localizedString = localizer[@"Hello", user, world, visitCount, dontPanic];
            if (!localizedString.ResourceNotFound)
            {
                return localizedString;
            }
          return localizer[$"""Hello {0} {1} {2} {3}""", user, world, visitCount, dontPanic];
        }
        #endregion
        #endregion
        #region properties
        #region typealized Greeting
        /// <summary>
        /// "Greeting"
        /// <summary>
        public LocalizedString Greeting
        {
          get
            {
              var localizedString = localizer["Greeting"];
              if (!localizedString.ResourceNotFound)
              {
                  return localizedString;
              }
              return localizer[$"""Greeting"""];
          }
        }
        #endregion
        #endregion
    }
}